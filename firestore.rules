rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if the requesting user is an admin
    function isAdmin() {
      return request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Rules for the results collection
    match /results/{resultId} {
      allow read: if true; // Allow public read access to results
      allow write: if isAdmin(); // Only admins can write new results
    }

    // Rules for the users collection
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isAdmin());
      allow update: if request.auth != null && request.auth.uid == userId &&
                      (!('role' in request.resource.data) || request.resource.data.role ==
resource.data.role);
      allow delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null;
    }

    // --- START: NEW RULES FOR 1-12 WIN GAME ---

    // Rules for the main game state document
    match /game_state/{docId} {
      // Allow any logged-in user to read game state for syncing.
      // Write access is needed for the aclient-side logic where one player's device
      // becomes the leader to calculate results and start the next round.
      // WARNING: In a production app, write access should be restricted to a trusted backend server.
      allow read, write: if request.auth != null;
    }

    // Rules for the bets placed in the game
    match /wingame_bets/{betId} {
      // Allow users to create their own bets.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Allow users to read their own bet history.
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      // Allow the client-side leader to update the status of all bets to 'win' or 'loss'.
      // WARNING: In a production app, this update logic should be on a trusted backend server.
      allow update: if request.auth != null;
    }

    // Rules for the historical record of game rounds
    match /wingame_rounds/{roundId} {
      // Allow any logged-in user to read past round results for their history page.
      allow read: if request.auth != null;
      // Allow the client-side leader to create the result document for the round.
      // WARNING: In a production app, this should be restricted to a trusted backend server.
      allow create: if request.auth != null;
    }

    // --- END: NEW RULES FOR 1-12 WIN GAME ---

    // Rules for the withdrawals collection
    match /withdrawals/{withdrawalId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAdmin();
    }

    // Rules for top-up (deposit) requests
    match /top-ups/{topUpId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
      allow update: if isAdmin();
      allow delete: if isAdmin(); // Allow admins to delete top-up requests
    }

    // Rules for the transactions collection (for referral bonuses, etc.)
    match /transactions/{transactionId} {
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }

    // Allow public read access to the marquee settings
    match /settings/marquee {
      allow read: if true;
      allow write: if isAdmin();
    }

    // DEPRECATED: These rules are for other games not currently being worked on.
    // They are kept for compatibility but might need review.
    match /bets/{betId} {
      allow create: if request.auth != null;
      allow read: if isAdmin();
    }
    match /harufBets/{betId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
    }
    match /rouletteBets/{betId} {
      allow create: if request.auth != null;
      allow read: if isAdmin();
    }
  }
}
